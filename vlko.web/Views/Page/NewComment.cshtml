@model CommentCRUDModel
@using vlko.BlogModule.Commands.CRUDModel
@using vlko.web.Controllers;
@using vlko.web.ViewModel.Page;
@using Microsoft.Web.Mvc.Html;

@Script.RegisterValidationJs(Html)
	
@using (Html.BeginForm((object)Routes.PageComment(
										friendlyUrl : Html.ViewContext.RouteData.GetRequiredString("friendlyUrl"),
										sort : Html.ViewContext.RouteData.GetRequiredString("sort")
									)
									, cssClass: "cleaner"))
{
	<fieldset>
		<legend>Add comment</legend>

		@Html.Hidden("Page", Html.ViewContext.RequestContext.HttpContext.Request.QueryString["Page"])
		@Html.HiddenFor(model => model.ContentId)
		@Html.HiddenFor(model => model.ParentId) 
		@if (Model.ChangeUser == null) {  
			<div class="editor-label">Anonymous name</div>
			<div class="editor-field">
				@Html.TextBoxFor(model => model.AnonymousName, cssClass: "text-box single-line", maxLength: Html.MaxLength(model => model.AnonymousName))
				@Html.ValidationMessageFor(model => model.AnonymousName)
			</div>
		}     	     
		else { 
			<div class="editor-label">User</div>
			<div class="editor-field">@Model.ChangeUser.Name</div>
		} 
		<div class="editor-label">Title</div>
		<div class="editor-field">
			@Html.TextBoxFor(model => model.Name, cssClass: "text-box single-line", maxLength: Html.MaxLength(model => model.Name))
			@Html.ValidationMessageFor(model => model.Name)
		</div>
		@if (Model.ChangeUser == null) {  
			<div class="editor-label">@Model.ExpressionText</div>
			<div class="editor-field">
				@Html.TextBoxFor(model => model.RoboCheck, cssClass: "text-box single-line")
				@Html.ValidationMessageFor(model => model.RoboCheck)
			</div>
		}
		<div class="editor-label">Text</div>
		<div class="editor-field">
			@Html.TextAreaFor(model => model.Text, cssClass: "text-box multi-line")
			@{if (Model.ChangeUser != null) {

				Html.ScriptInclude("~/Scripts/tiny_mce/jquery.tinymce.js");

				 Html.ScriptInlineInclude(
				 @<script type="text/javascript">
				  	$(function () {
				  		var editorId = "@item.Html.NameFor(model => model.Text)";
		
						$("#" + editorId).tinymce({
							// Location of TinyMCE script
							script_url : '@Url.Content("~/Scripts/tiny_mce/tiny_mce.js")',

							// General options
							theme : "advanced",
							plugins : "autolink,lists,pagebreak,style,layer,table,save,advhr,advimage,advlink,emotions,iespell,inlinepopups,insertdatetime,preview,media,searchreplace,print,contextmenu,paste,directionality,fullscreen,noneditable,visualchars,nonbreaking,xhtmlxtras,template,advlist",

							// Theme options
							theme_advanced_buttons1 : ",undo,redo,|bold,italic,underline,strikethrough,|,formatselect,|,cut,copy,paste,pastetext,pasteword,|,cite,abbr,acronym,del,ins,attribs,",
							theme_advanced_buttons2 : ",bullist,numlist,|,outdent,indent,blockquote,|,link,unlink,image,|,removeformat,visualaid,|,cleanup,code,fullscreen",
							theme_advanced_buttons3 : "",
							theme_advanced_buttons4 : "",
							theme_advanced_toolbar_location : "top",
							theme_advanced_toolbar_align : "left",
							theme_advanced_statusbar_location : "bottom",
							theme_advanced_resizing : true,

							// Example content CSS (should be your site CSS)
							content_css : "@Url.Content("~/Content/Site.css")"
						});
		
						setTimeout(function() {
							tinyMCE.execCommand('mceAddControl', false, editorId);
						}, 1000);
					});
					</script>);
			 }
			}
			@Html.ValidationMessageFor(model => model.Text)
		</div>          
		<div class="editor-submit"><input type="submit" value="Add" /></div>
	</fieldset>
}


